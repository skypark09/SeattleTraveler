package AirbnbSeattle.servlet;

import AirbnbSeattle.dal.*;
import AirbnbSeattle.model.AirbnbListing;
import AirbnbSeattle.model.Reviews;
import AirbnbSeattle.model.Users;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.annotation.*;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


@WebServlet("/reviews")
public class UserReviews extends HttpServlet {
	
	protected ReviewsDao reviewsDao;
	
	@Override
	public void init() throws ServletException {
		reviewsDao = ReviewsDao.getInstance();
	}
	
	@Override
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		// Map for storing messages.
        Map<String, String> messages = new HashMap<String, String>();
        req.setAttribute("messages", messages);
		
        List<Reviews> reviews = new ArrayList<Reviews>();
        
		// Retrieve BlogComments depending on valid PostId or UserName.
        String ListingId = req.getParameter("ListingId");
        String userId = req.getParameter("userID");
        
        try {
	        if (ListingId != null && !ListingId.trim().isEmpty()) {
	        	// If the postid param is provided then ignore the username param.
	        	reviews = reviewsDao.getReviewsByListingId(Long.valueOf(ListingId));
	        	messages.put("title", "Reviews for ListingId " + ListingId);
	        } else if (userId != null && !userId.trim().isEmpty()) {
	        	// If postid is invalid, then use the username param.
	        	reviews = reviewsDao.getReviewsByUserId(Long.valueOf(userId));
	        	messages.put("title", "Reviews for userID " + userId);
	        } else {
	        	messages.put("title", "Invalid ListingId and userID.");
	        }
        } catch (SQLException e) {
			e.printStackTrace();
			throw new IOException(e);
        }
        
        req.setAttribute("reviews", reviews);
        req.getRequestDispatcher("/UserReviews.jsp").forward(req, resp);
	}
}
